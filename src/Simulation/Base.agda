module Simulation.Base where
open import Level
  using (Level)
  renaming (zero to lzero; suc to lsuc)
open import Data.Nat
  using (‚Ñï; zero; suc; _+_; _‚â§_; z‚â§n; s‚â§s)
open import Data.Fin
  using (Fin; inject‚ÇÅ; inject‚â§; inject+; cast; to‚Ñï; from‚Ñï; from‚Ñï<)
  renaming (zero to zeroF; suc to sucF)
open import Data.Fin.Patterns
open import Data.Product
  using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum
  using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl)
  renaming (sym to ‚â°sym; cong to ‚â°cong; cong-app to ‚â°cong-app)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Unary
  using (_‚àà_; _‚ü®‚äé‚ü©_; ‚àÖ; Satisfiable; Universal; Empty; Pred)
open import Function.Base
  using (id; case_of_)

open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation
  using (contradiction; contraposition; ¬¨‚àÉ‚ü∂‚àÄ¬¨)
  
open import Data.Empty
  using (‚ä•; ‚ä•-elim)
open import Data.Unit.Base
  using (‚ä§; tt)

open import Base
open import Word
open import NA

-- first required property of ordinary simulation,
-- regarding _acceptance_

Acceptance : {a : Level} {X‚ÇÅ X‚ÇÇ A : Set}
             ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
             ‚Üí Pred (X‚ÇÅ √ó X‚ÇÇ) a ‚Üí Set _
Acceptance na‚ÇÅ na‚ÇÇ R =
  -- given any `x : X‚ÇÅ` and `y : X‚ÇÇ` that are related by `R`,
  ‚àÄ x y ‚Üí (x , y) ‚àà R ‚Üí
    -- if `x` is accepted, then `y` is also accepted
    x ‚àà (NA.accept na‚ÇÅ) ‚Üí y ‚àà (NA.accept na‚ÇÇ)

-- second required property of ordinary simulation,
-- regarding _step-wise match_

StepMatch : {a : Level} {X‚ÇÅ X‚ÇÇ A : Set}
            ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
            ‚Üí Pred (X‚ÇÅ √ó X‚ÇÇ) a ‚Üí Set _
StepMatch na‚ÇÅ na‚ÇÇ R =
  -- given any `x : X‚ÇÅ` and `y : X‚ÇÇ` that are related by `R`,
  ‚àÄ x y ‚Üí (x , y) ‚àà R ‚Üí
  -- for any `a : A` and `x' : X‚ÇÅ`,
  ‚àÄ a ‚Üí ‚àÄ x' ‚Üí
  -- if `(x , a , x')` is a transition in `na‚ÇÅ`,
  (x , a , x') ‚àà (NA.trans na‚ÇÅ) ‚Üí
  -- then there exists some state `y' : X‚ÇÇ` s.t.
  ‚àÉ Œª y' ‚Üí
    -- [1] (y , a , y') is a valid transition in na‚ÇÇ
    (y , a , y') ‚àà (NA.trans na‚ÇÇ)
    -- [2] x' and y' are related by R again
    √ó (x' , y') ‚àà R

-- the type of "proofs that a binary relation is a simulation"

record IsSimulation {a : Level} {X‚ÇÅ X‚ÇÇ A : Set} (na‚ÇÅ : NA X‚ÇÅ A) (na‚ÇÇ : NA X‚ÇÇ A)
                    (R : Pred (X‚ÇÅ √ó X‚ÇÇ) a) : Set a where
  constructor isSim
  field
    acceptance : Acceptance na‚ÇÅ na‚ÇÇ R
    step-match : StepMatch na‚ÇÅ na‚ÇÇ R

-- the type of simulations
-- between two NA `NA X‚ÇÅ A` and `NA X‚ÇÇ A` with the same alphabet `A`
-- NB. `X‚ÇÅ`, `X‚ÇÇ` and `A` are are again parameters
--     so that they are visible from outside
--     (cf. the definition of `NA`)

record Simulation {a : Level} {X‚ÇÅ X‚ÇÇ A : Set} (na‚ÇÅ : NA X‚ÇÅ A) (na‚ÇÇ : NA X‚ÇÇ A)
                  : Set (lsuc a) where
  constructor aSim
  field
    ùëÖ            : Pred (X‚ÇÅ √ó X‚ÇÇ) a -- the simulation relation
    isSimulation : IsSimulation na‚ÇÅ na‚ÇÇ ùëÖ -- proof
