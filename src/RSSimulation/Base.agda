----------------------------------------------------------------------
-- reachability-sensitive simulation between NA

module RSSimulation.Base where
open import Level
  using (Level)
  renaming (zero to lzero; suc to lsuc)
open import Data.Nat
  using (‚Ñï; zero; suc; _+_; _‚â§_; z‚â§n; s‚â§s)
open import Data.Fin
  using (Fin; inject‚ÇÅ; inject‚â§; inject+; cast; to‚Ñï; from‚Ñï; from‚Ñï<)
  renaming (zero to zeroF; suc to sucF)
open import Data.Fin.Patterns
open import Data.Product
  using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum
  using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl)
  renaming (sym to ‚â°sym; cong to ‚â°cong; cong-app to ‚â°cong-app)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Unary
  using (_‚àà_; _‚ü®‚äé‚ü©_; ‚àÖ; Satisfiable; Universal; Empty; Pred)
open import Function.Base
  using (id; case_of_)

open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation
  using (contradiction; contraposition; ¬¨‚àÉ‚ü∂‚àÄ¬¨)
  
open import Data.Empty
  using (‚ä•; ‚ä•-elim)
open import Data.Unit.Base
  using (‚ä§; tt)

open import Base
open import Word
open import NA
open import Simulation.Base

-- combinator
-- cf. _‚ü®‚äé‚ü©_ in
--     https://agda.github.io/agda-stdlib/Relation.Unary.html

infixr  1 _‚ü®‚äé‚ü© ≥_

_‚ü®‚äé‚ü© ≥_ : {A B C : Set}
         -> Pred' (A √ó B) -> Pred' (A √ó C) -> Pred' (A √ó (B ‚äé C))
(P ‚ü®‚äé‚ü© ≥ Q) (a , inj‚ÇÅ b) = P (a , b)
(P ‚ü®‚äé‚ü© ≥ Q) (a , inj‚ÇÇ c) = Q (a , c)

-- the type of reachability-sensitive simulations
-- between two NA `NA X‚ÇÅ A` and `NA X‚ÇÇ A` with the same alphabet `A`

record RSSimulation {X‚ÇÅ X‚ÇÇ A : Set}
                    (na‚ÇÅ : NA X‚ÇÅ A) (na‚ÇÇ : NA X‚ÇÇ A)
                    : Set‚ÇÅ where
  constructor aRSSim
  field
    ùëÖ            : Pred' (X‚ÇÅ √ó X‚ÇÇ)  -- the r.s. simulation relation
    ùëÖ'           : Pred' (X‚ÇÅ √ó One) -- a helper relation
    isSimulation : IsSimulation na‚ÇÅ [ na‚ÇÇ ]‚ä• (ùëÖ ‚ü®‚äé‚ü© ≥ ùëÖ') -- proof
