----------------------------------------------------------------------
-- properties of reachability-sensitive simulations

module RSSimulation.Properties where
open import Level
  using (Level)
  renaming (zero to lzero; suc to lsuc)
open import Data.Nat
  using (‚Ñï; zero; suc; _+_; _‚â§_; z‚â§n; s‚â§s)
open import Data.Fin
  using (Fin; inject‚ÇÅ; inject‚â§; inject+; cast; to‚Ñï; from‚Ñï; from‚Ñï<)
  renaming (zero to zeroF; suc to sucF)
open import Data.Fin.Patterns
open import Data.Product
  using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum
  using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl)
  renaming (sym to ‚â°sym; cong to ‚â°cong; cong-app to ‚â°cong-app)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Unary
  using (_‚àà_; _‚àâ_; ‚àÖ; _‚äÜ‚Ä≤_; U; ÔΩõ_ÔΩù)
open import Function.Base
  using (case_of_)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation
  using (contradiction)
open import Data.Empty
  using (‚ä•; ‚ä•-elim)
open import Data.Unit.Base
  using (‚ä§; tt)

open import Base
open import Word
open import NA
open import Simulation.Base
open import Simulation.Properties
open import RSSimulation.Base

------------------------------------------------------------------
-- soundness

-- soundness wrt. finite language of fixed length

RSSim-soundFin :
  {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
  ‚Üí (R : RSSimulation na‚ÇÅ na‚ÇÇ)
  ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (RSSimulation.ùëÖ R)
  ‚Üí (n : ‚Ñï) ‚Üí FinAccLang na‚ÇÅ x n ‚äÜ‚Ä≤ FinAccLang na‚ÇÇ y n
-- the proof is by induction on the length
--              (in a similar way as `Sim·¥æ.soundFin`)
-- base case: when the length is `0`
RSSim-soundFin na‚ÇÅ na‚ÇÇ (aRSSim R R' R‚äéR'-sim) x y xRy 0 =
  -- for any `as : FinWord 0 A`, if `as ‚àà FinAccLang na‚ÇÅ x 0`,
  Œª as as‚ààFinAccLang[x] ‚Üí
    -- (1) the existence of such `as` implies that
    --     the state `x` is an accepting state
    let x-acc = (Equiv.‚áí (FinAccLang0-‚àÉ‚áî‚ààaccept na‚ÇÅ x))
                  (as , as‚ààFinAccLang[x]) in
    -- (2) by the acceptance condition of simulation,
    --     the state `y` is also an accepting state
    --     in `[ na‚ÇÇ ]‚ä•`, and hence in `na‚ÇÇ`
    let y-acc =
          (IsSimulation.acceptance R‚äéR'-sim) x (inj‚ÇÅ y) xRy x-acc in
    -- (3) by (2), `as : FinWord 0 A` is also accepted
    --     in `na‚ÇÇ` from the state `y`
    (Equiv.‚áê (FinAccLang0-Œ†‚áî‚ààaccept na‚ÇÇ y)) y-acc as
-- inductive case: when the length is `suc n`
RSSim-soundFin na‚ÇÅ na‚ÇÇ R‚äéR'@(aRSSim R R' R‚äéR'-sim) x y xRy (suc n) =
  -- for any `as : FinWord (suc n) A`,
  Œª as ‚Üí
  -- if `as ‚àà FinAccLang na‚ÇÅ x (suc n)`, with
  -- some witness `xs : FinWord (suc (suc n)) X‚ÇÅ` s.t.:
  -- [1] it starts with `x`,
  -- [2] it is a run on `as`,
  -- [3] it ends with an accepting state,
  Œª { as‚ààFinAccLang[x]@(xs , xs-head‚â°x , xs-run-on-as , _) ‚Üí
    -- (1) `tailF xs` witnesses acceptance of `tailF as`
    --     from the state `xs 1F`
    let as+‚ààFinAccLang[xs‚ÇÅ] : (tailF as) ‚àà FinAccLang na‚ÇÅ (xs 1F) n
        as+‚ààFinAccLang[xs‚ÇÅ] = FinAccLang-pop na‚ÇÅ as‚ààFinAccLang[x] in
    -- (2) by the stap-match condition of simulation,
    --     `(x , y) ‚àà R` (i.e. `(inj‚ÇÅ x , y) ‚àà "R ‚äé R'"`) and
    --     `(x , as 0F , xs 1F) ‚â° (xs 0F , as 0F , xs 1F)
    --                          ‚àà NA.trans na‚ÇÅ`
    --     imply existence of some state `z : X‚ÇÇ ‚äé One` s.t.
    --     `(y , as 0F , z)` is a transition in `[ na‚ÇÇ ]‚ä•`
    --     and `(xs 1F , z) ‚àà "R ‚äé R'"`
    let (z , y-as‚ÇÄ‚Üíz , xs‚ÇÅR‚äéR'z) =
          (IsSimulation.step-match R‚äéR'-sim) x (inj‚ÇÅ y) xRy
            (as 0F) (xs 1F)
            ((NA.trans na‚ÇÅ) ‚ü® xs-run-on-as 0F ‚ü©‚àã
             (begin
              (xs 0F , as 0F , xs 1F)
             ‚â°‚ü® ‚â°cong (_, as 0F , xs 1F) xs-head‚â°x ‚ü©
              (x , as 0F , xs 1F)
             ‚àé)) in
    -- (3) by (2) and soundness of the ordinary simulation "R + R'",
    --     `tailF as` is also accepted in `[ na‚ÇÇ ]‚ä•` from
    --     the state `z`
    let as+‚ààFinAccLang[z] : (tailF as) ‚àà FinAccLang [ na‚ÇÇ ]‚ä• z n
        as+‚ààFinAccLang[z] =
          Sim-soundFin na‚ÇÅ [ na‚ÇÇ ]‚ä• (aSim (R ‚ü®‚äé‚ü© ≥ R') R‚äéR'-sim)
                       (xs 1F) z xs‚ÇÅR‚äéR'z n
                       (tailF as) as+‚ààFinAccLang[xs‚ÇÅ] in
    -- (4) by case analisys on `z`, we can prove that
    --     `as` is also accepted in `na‚ÇÇ` from the state `y`
    case (inspect' z) of
    Œª {
      -- case 1: `z ‚â° inj‚ÇÅ y'` for some `y' : X‚ÇÇ`
      (inj‚ÇÅ y' with‚â° z‚â°y') ‚Üí
        -- (1:1) `(xs 1F , y') ‚àà R` necessarily holds
        let xs‚ÇÅRy' : (xs 1F , y') ‚àà R
            xs‚ÇÅRy' =
              (R ‚ü®‚äé‚ü© ≥ R') ‚ü® xs‚ÇÅR‚äéR'z ‚ü©‚àã
              (begin
                (xs 1F , z)
              ‚â°‚ü® ‚â°cong (xs 1F ,_) z‚â°y' ‚ü©
                (xs 1F , inj‚ÇÅ y')
              ‚àé) in
        -- (1:2) by I.H., `tailF as` is accepted in `na‚ÇÇ`
        --       from the state `y'`
        let as+‚ààFinAccLang[y'] : (tailF as) ‚àà FinAccLang na‚ÇÇ y' n
            as+‚ààFinAccLang[y'] =
              RSSim-soundFin na‚ÇÅ na‚ÇÇ R‚äéR' (xs 1F) y' xs‚ÇÅRy' n
                             (tailF as) as+‚ààFinAccLang[xs‚ÇÅ] in
        -- (1:3) therefore, since `(y , as 0F , y')` is a transition
        --       in `na‚ÇÇ`,
        --       `as` is accepted in `na‚ÇÇ` from the state `y`
        FinAccLang-unpop na‚ÇÇ as+‚ààFinAccLang[y']
          ((NA.trans [ na‚ÇÇ ]‚ä•) ‚ü® y-as‚ÇÄ‚Üíz ‚ü©‚àã
           (begin
             (inj‚ÇÅ y , as 0F , z)
           ‚â°‚ü® ‚â°cong (inj‚ÇÅ y ,_)
                    (‚â°cong (as 0F ,_) z‚â°y') ‚ü©
             (inj‚ÇÅ y , as 0F , inj‚ÇÅ y')
           ‚àé));
      -- case 2: `z ‚â° inj‚ÇÇ sink`
      (inj‚ÇÇ sink with‚â° z‚â°sink) ‚Üí
        -- (2:1) `tailF as` is necessarily accepted in `[ na‚ÇÇ ]‚ä•`
        --       from the sink state
        let as+‚ààFinAccLang[sink] :
              (tailF as) ‚àà FinAccLang [ na‚ÇÇ ]‚ä• (inj‚ÇÇ sink) n
            as+‚ààFinAccLang[sink] =
              (tailF as) ‚ü® as+‚ààFinAccLang[z] ‚ü©‚àà
              (begin
                FinAccLang [ na‚ÇÇ ]‚ä• z n
              ‚â°‚ü® ‚â°cong-app (‚â°cong (FinAccLang [ na‚ÇÇ ]‚ä•) z‚â°sink) n ‚ü©
                FinAccLang [ na‚ÇÇ ]‚ä• (inj‚ÇÇ sink) n
              ‚àé) in
        -- (2:2) however, this acceptance is actually impossible
        --       because `[ na‚ÇÇ ]‚ä•` accepts no word from `sink`,
        --       which means that
        --       this case `z ‚â° inj‚ÇÇ sink` never happens
        ‚ä•-elim (FinAccLang[sink]-Empty na‚ÇÇ n (tailF as)
                                       as+‚ààFinAccLang[sink])
    }
  }

-- soundness wrt. finite language

RSSim-soundFIN :
  {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
  ‚Üí (R‚äéR' : RSSimulation na‚ÇÅ na‚ÇÇ)
  ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (RSSimulation.ùëÖ R‚äéR')
  ‚Üí FINAccLang na‚ÇÅ x ‚äÜ‚Ä≤ FINAccLang na‚ÇÇ y
RSSim-soundFIN na‚ÇÅ na‚ÇÇ R‚äéR' x y xRy =
  Ôºª RSSim-soundFin na‚ÇÅ na‚ÇÇ R‚äéR' x y xRy ÔºΩ'

-- _un_soundness wrt. infinite language

RSSim-¬¨soundINF :
  ¬¨ ({X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
     ‚Üí (R‚äéR' : RSSimulation na‚ÇÅ na‚ÇÇ)
     ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (RSSimulation.ùëÖ R‚äéR')
     ‚Üí (INFAccLang na‚ÇÅ x ‚äÜ‚Ä≤ INFAccLang na‚ÇÇ y))
RSSim-¬¨soundINF =
  -- if soundness holds,
  Œª rssim-sound ‚Üí
    -- (1) we take the following two NFA
    --     and a reachability-sensitive simulation between them
    -- (1-1) an NFA `nfa0‚ü≤0 : NA (Fin 1) Nat`
    --       with a single non-accepting state `0F : Fin 1`
    --            and a single transition for `0 : Nat`
    let nfa0‚ü≤0 : NA (Fin 1) ‚Ñï
        nfa0‚ü≤0 = record {
          trans  = ÔΩõ (0F , 0 , 0F) ÔΩù; -- transition for `0` only
          init   = U;                   -- `0F` is initial
          accept = ‚àÖ                    -- no accepting state
          } in
    -- (1-2) an NFA `nfa0 : NA (Fin 1) Nat`
    --       with a single non-accepting state `0F : Fin 1`
    --            and no transition
    let nfa0 : NA (Fin 1) ‚Ñï
        nfa0 = record {
          trans  = ‚àÖ;         -- no transition
          init   = U;         -- `0F` is initial
          accept = ‚àÖ          -- no accepting state
          } in
    -- (1-3) a reachability-sensitive simulation between
    --       `nfa0‚ü≤0` and `nfa0`, given by the universal relation
    let rssim:nfa0‚ü≤0-nfa0 : RSSimulation nfa0‚ü≤0 nfa0
        rssim:nfa0‚ü≤0-nfa0 = record {
          ùëÖ = U;              -- Fin 1 √ó Fin 1
          ùëÖ' = U;             -- Fin 1 √ó One
          isSimulation = record {
            acceptance =
              -- for all `x : Fin1`
              --         and `y : Fin 1`, if `(x , y) ‚àà R`,
              Œª x y _ ‚Üí
              -- `x` is never accepted anyway
              Œª ();
            step-match =
              -- for all `x : Fin 1` and `y : (Fin 1) ‚äé One`
              --         s.t. `(x , y) ‚àà R`,
              -- and for all `a : Nat` and `x' : Fin 1`
              --         s.t. `(x , a , x') ‚àà NA.trans nfa0‚ü≤0`,
              -- `a` is necessarily `0`;
              Œª {
                -- when `y ‚â° inj‚ÇÅ 0F`,
                x (inj‚ÇÅ 0F) _ 0 x' _ ‚Üí
                  -- we can take the sink state of `[ nfa0 ]‚ä•`,
                  -- so that:
                  -- [1] `(0F , 0 , sink) ‚àà NA.trans [ nfa0 ]‚ä•`,
                  -- [2] `(x' , sink) ‚àà R'`
                  (inj‚ÇÇ sink , tt , tt);
                -- when `y ‚â° inj‚ÇÇ sink`,
                x (inj‚ÇÇ sink) _ 0 x' _ ‚Üí
                  -- we can again take the sink state of `[ nfa0 ]‚ä•`
                  -- so that:
                  -- [1] `(sink , 0 , sink) ‚àà NA.trans [ nfa0 ]‚ä•`,
                  -- [2] `(x' , sink) ‚àà R'`
                  (inj‚ÇÇ sink , tt , tt)
              }
            }
          } in
    -- (2) by assumption, any infinite word accepted by `nfa0‚ü≤0`
    --     (from its sole state `0F`) must be accepted by `nfa0` too
    --     (from its sole state `0F`)
    let INFAccLang-‚äÜ : INFAccLang nfa0‚ü≤0 0F ‚äÜ‚Ä≤ INFAccLang nfa0 0F
        INFAccLang-‚äÜ = rssim-sound {Fin 1} {Fin 1} {‚Ñï} nfa0‚ü≤0 nfa0
                                   rssim:nfa0‚ü≤0-nfa0 0F 0F tt in
    -- (3) an infinite word "0, 0, 0, ..." is accepted in `nfa0‚ü≤0`,
    --     and therefore, it must be accepted in `nfa0` too
    let ùüò : INFWord ‚Ñï
        ùüò = Œª{ _ ‚Üí 0 }
        ùüò‚ààINFAccLang[nfa0‚ü≤0] : ùüò ‚àà INFAccLang nfa0‚ü≤0 0F
        ùüò‚ààINFAccLang[nfa0‚ü≤0] =
          -- `ùüò` is indeed accepted in `nfa0‚ü≤0` from `0F`, because
          -- we can take the sequence "0F, 0F, ..." of states s.t.:
          ((Œª{ _ ‚Üí 0F })
          -- [1] it starts with `0F`
          , refl
          -- [2] it is a run on `ùüò`
          , (Œª{ _ ‚Üí refl }))
        ùüò‚ààINFAccLang[nfa0] : ùüò ‚àà INFAccLang nfa0 0F
        ùüò‚ààINFAccLang[nfa0] = INFAccLang-‚äÜ ùüò ùüò‚ààINFAccLang[nfa0‚ü≤0] in
    -- (3) however, the infinite word `ùüò` is not actually accepted
    --     in `nfa0`, which leads to a contradiction
    let ùüò‚àâINFAccLang[nfa0] : ùüò ‚àâ INFAccLang nfa0 0F
        ùüò‚àâINFAccLang[nfa0] =
          -- if `ùüò` is accepted in `nfa0` from `0F`,
          -- which means existence of some `xs : INFWord (Fin 1)`
          -- s.t. [1] it starts with `0F`,
          --      [2] it is a run on `ùüò`,
          Œª { (xs , xs-head‚â°0F , xs-run-on-ùüò) ‚Üí
            -- there must be a transition `(xs 0 , 0 , xs 1)`
            -- in `nfa0`, but it is not a valid transition
            xs-run-on-ùüò 0
          } in
    contradiction ùüò‚ààINFAccLang[nfa0] ùüò‚àâINFAccLang[nfa0]
